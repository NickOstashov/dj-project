{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache) {\n  const _component_v_select = _resolveComponent(\"v-select\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_v_select, {\n    onSearch: _ctx.getProblem,\n    options: _ctx.problem_list,\n    label: \"naming\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.$emit('update:modelValue', $event))\n  }, null, 8 /* PROPS */, [\"onSearch\", \"options\"])]);\n}","map":{"version":3,"mappings":";;;uBACIA,oBAEM,cADFC,aAA8HC;IAAnHC,QAAM,EAAEC,eAAU;IAAGC,OAAO,EAAED,iBAAY;IAAEE,KAAK,EAAC,QAAQ;IAAE,qBAAiB,sCAAEF,UAAK,sBAAqBG,MAAM","names":["_createElementBlock","_createVNode","_component_v_select","onSearch","_ctx","options","label","$event"],"sourceRoot":"","sources":["/Users/noone/Desktop/it-dj/dj-project/djsite/psuapp/main-app/src/components/SelectProblem.vue"],"sourcesContent":["<template>\n    <div>\n        <v-select @search=\"getProblem\" :options=\"problem_list\" label=\"naming\" @update:modelValue=\"$emit('update:modelValue',$event)\"/>\n    </div>\n</template>\n\n\n<script>\nimport vSelect from 'vue-select'\nimport {Problem} from '@/api'\n\n    export default{\n        name:\"select-problem\",\n        props:['modelValue'],\n\n        data(){\n            return{\n                problem_list:[],\n            }\n        },\n        methods:{\n            async getProblem(search){\n                let params = {\n                    naming__icontains:search\n                }\n                let data = await Problem.objects.filter(params)\n                this.problem_list = data \n            }\n        },\n        components:{\n            vSelect,\n        }\n\n        mounted(){\n            \n        }\n    }\n</script>\n\n<style>\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}